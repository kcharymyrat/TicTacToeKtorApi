type: edu
files:
  - name: src/resources/application.conf
    visible: true
    text: |-
      ktor {
          deployment {
              port = 28852
          }
          application {
              modules = [tictactoeonline.ApplicationKt.module]
          }
      }
    learner_created: false
  - name: src/tictactoeonline/Application.kt
    visible: true
    text: |-
      package tictactoeonline
      
      fun main() {
          println("Hello World")
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |-
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-serialization:$hs.kotlin.version"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.jetbrains.kotlin.jvm'
      apply plugin: 'kotlinx-serialization'
      version '1.0-SNAPSHOT'
      
      repositories {
          mavenCentral()
      }
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation "org.jetbrains.kotlin:kotlin-stdlib"
          implementation "io.ktor:ktor-server-core:1.6.7"
          implementation "io.ktor:ktor-server-netty:1.6.7"
          implementation "ch.qos.logback:logback-classic:1.2.10"
          implementation "io.ktor:ktor-serialization:1.6.7"
          implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.0"
          testImplementation "io.ktor:ktor-server-test-host:1.6.7"
      }
    learner_created: false
  - name: test/TicTacToeOnlineTest.kt
    visible: false
    text: |-
      import io.ktor.application.*
      import io.ktor.http.*
      import io.ktor.request.*
      import io.ktor.server.testing.*
      import kotlinx.serialization.Serializable
      import tictactoeonline.module
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      import org.hyperskill.hstest.testing.expect.Expectation.expect
      import kotlinx.serialization.json.Json
      import kotlinx.serialization.decodeFromString
      import java.util.regex.Pattern.compile;
      import org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      
      class TicTacToeOnlineTest : StageTest<Any>() {
          @DynamicTest
          fun test1(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
                      handleRequest(HttpMethod.Get, "/game/status").apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("game_status", compile("game not started"))
                          )
                      }
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest
          fun test2(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("{ }")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result = CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("New game started"))
                                  .value("player1", compile("Player1"))
                                  .value("player2", compile("Player2"))
                                  .value("size", compile("3x3"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody(
                              """
                          {
                              "player1": "Mike",
                              "player2": "Kirk",
                              "size": "2x1"
                          }
                      """.trimIndent()
                          )
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result = CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("New game started"))
                                  .value("player1", compile("Mike"))
                                  .value("player2", compile("Kirk"))
                                  .value("size", compile("3x3"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody(
                              """
                          {
                              "player1": "Aug",
                              "player2": "Lol",
                              "size": "fdhdfydrsf"
                          }
                      """.trimIndent()
                          )
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result = CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("New game started"))
                                  .value("player1", compile("Aug"))
                                  .value("player2", compile("Lol"))
                                  .value("size", compile("3x3"))
                          )
                      }
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest
          fun test3(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody(
                              """
                          {
                              "player1": "Armageddon",
                              "player2": "Rachel",
                              "size": "2x5"
                          }
                      """.trimIndent()
                          )
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result = CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("New game started"))
                                  .value("player1", compile("Armageddon"))
                                  .value("player2", compile("Rachel"))
                                  .value("size", compile("2x5"))
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/game/status").apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound: ${response.status()}\nRoute: /game/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("player1", compile("Armageddon"))
                                  .value("player2", compile("Rachel"))
                                  .value("size", compile("2x5"))
                                  .value("game_status", compile("1st player's move"))
                                  .value(
                                      "field", isArray(
                                          2,
                                          isArray(5, isString(" "))
                                      )
                                  )
                          )
                      }
      
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest
          fun test4(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("{ }")
                      }
      
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(3,2)"
                          }
                      """.trimIndent())
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound: ${response.status()}\nRoute: /game/move")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/move")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Move done"))
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/game/status").apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound: ${response.status()}\nRoute: /game/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("player1", compile("Player1"))
                                  .value("player2", compile("Player2"))
                                  .value("size", compile("3x3"))
                                  .value("game_status", compile("2nd player's move"))
                                  .value(
                                      "field",
                                      isArray(3)
                                          .item(0, isArray(" ", " ", " "))
                                          .item(1, isArray(" ", " ", " "))
                                          .item(2, isArray(" ", "X", " "))
                                  )
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(3,3)"
                          }
                      """.trimIndent())
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound: ${response.status()}\nRoute: /game/move")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/move")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Move done"))
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/game/status").apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound: ${response.status()}\nRoute: /game/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("player1", compile("Player1"))
                                  .value("player2", compile("Player2"))
                                  .value("size", compile("3x3"))
                                  .value("game_status", compile("1st player's move"))
                                  .value(
                                      "field",
                                      isArray(3)
                                          .item(0, isArray(" ", " ", " "))
                                          .item(1, isArray(" ", " ", " "))
                                          .item(2, isArray(" ", "X", "O"))
                                  )
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(2,2)"
                          }
                      """.trimIndent())
                      }
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(2,3)"
                          }
                      """.trimIndent())
                      }
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(1,2)"
                          }
                      """.trimIndent())
                      }
      
                      handleRequest(HttpMethod.Get, "/game/status").apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound: ${response.status()}\nRoute: /game/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("player1", compile("Player1"))
                                  .value("player2", compile("Player2"))
                                  .value("size", compile("3x3"))
                                  .value("game_status", compile("1st player won"))
                                  .value(
                                      "field",
                                      isArray(3)
                                          .item(0, isArray(" ", "X", " "))
                                          .item(1, isArray(" ", "X", "O"))
                                          .item(2, isArray(" ", "X", "O"))
                                  )
                          )
                      }
      
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest
          fun test5(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("{ }")
                      }
      
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(3,2)"
                          }
                      """.trimIndent())
                      }
      
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(3,2)"
                          }
                      """.trimIndent())
                      }.apply {
                          if (response.status() != HttpStatusCode.BadRequest) {
                              result =
                                  CheckResult.wrong("Expected status: 400 Bad Request\nFound: ${response.status()}\nRoute: /game/move")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/move")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Incorrect or impossible move"))
                          )
                      }
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(100,100)"
                          }
                      """.trimIndent())
                      }.apply {
                          if (response.status() != HttpStatusCode.BadRequest) {
                              result =
                                  CheckResult.wrong("Expected status: 400 Bad Request\nFound: ${response.status()}\nRoute: /game/move")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/move")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Incorrect or impossible move"))
                          )
                      }
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "segfsfdgfdsg"
                          }
                      """.trimIndent())
                      }.apply {
                          if (response.status() != HttpStatusCode.BadRequest) {
                              result =
                                  CheckResult.wrong("Expected status: 400 Bad Request\nFound: ${response.status()}\nRoute: /game/move")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/move")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Incorrect or impossible move"))
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/game/status").apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound: ${response.status()}\nRoute: /game/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("player1", compile("Player1"))
                                  .value("player2", compile("Player2"))
                                  .value("size", compile("3x3"))
                                  .value("game_status", compile("2nd player's move"))
                                  .value(
                                      "field",
                                      isArray(3)
                                          .item(0, isArray(" ", " ", " "))
                                          .item(1, isArray(" ", " ", " "))
                                          .item(2, isArray(" ", "X", " "))
                                  )
                          )
                      }
      
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest
          fun test6(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody(
                              """
                          {
                              "player1": "Armageddon",
                              "player2": "Rachel",
                              "size": "1x10"
                          }
                      """.trimIndent()
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(1,1)"
                          }
                      """.trimIndent())
                      }
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(1,2)"
                          }
                      """.trimIndent())
                      }
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(1,3)"
                          }
                      """.trimIndent())
                      }
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(1,4)"
                          }
                      """.trimIndent())
                      }
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(1,5)"
                          }
                      """.trimIndent())
                      }
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(1,6)"
                          }
                      """.trimIndent())
                      }
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(1,7)"
                          }
                      """.trimIndent())
                      }
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(1,8)"
                          }
                      """.trimIndent())
                      }
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(1,9)"
                          }
                      """.trimIndent())
                      }
                      handleRequest(HttpMethod.Post, "/game/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("""
                          {
                              "move": "(1,10)"
                          }
                      """.trimIndent())
                      }
      
                      handleRequest(HttpMethod.Get, "/game/status").apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound: ${response.status()}\nRoute: /game/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("player1", compile("Armageddon"))
                                  .value("player2", compile("Rachel"))
                                  .value("size", compile("1x10"))
                                  .value("game_status", compile("draw"))
                                  .value(
                                      "field",
                                      isArray(1)
                                          .item(0, isArray("X", "O", "X", "O", "X", "O", "X", "O", "X", "O"))
                                  )
                          )
                      }
      
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      }
    learner_created: false
  - name: src/tictactoeonline/ConsoleGame.kt
    visible: true
    learner_created: true
  - name: src/tictactoeonline/plugins/Routing.kt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/30564#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 01 Oct 2023 06:24:19 UTC"
record: 2
