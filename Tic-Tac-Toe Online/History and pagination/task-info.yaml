type: edu
files:
  - name: src/resources/application.conf
    visible: true
    text: |-
      ktor {
          deployment {
              port = 28852
          }
          application {
              modules = [tictactoeonline.ApplicationKt.module]
          }
      }
    learner_created: false
  - name: src/tictactoeonline/Application.kt
    visible: true
    text: |-
      package tictactoeonline
      
      fun main() {
          println("Hello World")
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |-
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-serialization:$hs.kotlin.version"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.jetbrains.kotlin.jvm'
      apply plugin: 'kotlinx-serialization'
      version '1.0-SNAPSHOT'
      
      repositories {
          mavenCentral()
      }
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation "org.jetbrains.kotlin:kotlin-stdlib"
          implementation "io.ktor:ktor-server-core:1.6.7"
          implementation "io.ktor:ktor-server-netty:1.6.7"
          implementation "ch.qos.logback:logback-classic:1.2.10"
          implementation "io.ktor:ktor-serialization:1.6.7"
          implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.0"
          testImplementation "io.ktor:ktor-server-test-host:1.6.7"
      }
    learner_created: false
  - name: test/TicTacToeOnlineTest.kt
    visible: false
    text: |-
      import com.typesafe.config.ConfigFactory
      import io.ktor.config.*
      import io.ktor.http.*
      import io.ktor.server.testing.*
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      import org.hyperskill.hstest.testing.expect.Expectation.expect
      import java.util.regex.Pattern.compile;
      import org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      import java.io.File
      import java.nio.file.Paths
      
      class TicTacToeOnlineTest : StageTest<Any>() {
      
          private val testEnv = createTestEnvironment {
              config = HoconApplicationConfig(ConfigFactory.load("application.conf"))
          }
      
          @DynamicTest
          fun test0_deleteDbFile(): CheckResult {
              val dbFile = File(Paths.get("", "build", "db.mv.db").toAbsolutePath().toString())
              dbFile.delete()
              return CheckResult.correct()
          }
      
          @DynamicTest
          fun test1(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withApplication(testEnv) {
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(
                              """
                          {
                              "player1": "mira@hyperskill.org",
                              "player2": "",
                              "size": "4x3",
                              "private": false
                          }
                      """.trimIndent()
                          )
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("game_id", isInteger(1))
                                  .value("status", compile("New game started"))
                                  .value("player1", compile("mira@hyperskill.org"))
                                  .value("player2", compile(""))
                                  .value("size", compile("4x3"))
                                  .value("private", isBoolean(false))
                                  .value("token", isString(""))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(
                              """
                          {
                              "player1": "",
                              "player2": "alex@hyperskill.org",
                              "size": "3x6",
                              "private": false
                          }
                      """.trimIndent()
                          )
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("game_id", isInteger(2))
                                  .value("status", compile("New game started"))
                                  .value("player1", compile(""))
                                  .value("player2", compile("alex@hyperskill.org"))
                                  .value("size", compile("3x6"))
                                  .value("private", isBoolean(false))
                                  .value("token", isString(""))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(
                              """
                          {
                              "player1": "",
                              "player2": "alex@hyperskill.org",
                              "size": "3x6",
                              "private": true
                          }
                      """.trimIndent()
                          )
                      }
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(
                              """
                          {
                              "player1": "",
                              "player2": "alex@hyperskill.org",
                              "size": "3x6",
                              "private": true
                          }
                      """.trimIndent()
                          )
                      }
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(
                              """
                          {
                              "player1": "",
                              "player2": "alex@hyperskill.org",
                              "size": "3x6",
                              "private": true
                          }
                      """.trimIndent()
                          )
                      }
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(
                              """
                          {
                              "player1": "",
                              "player2": "alex@hyperskill.org",
                              "size": "3x6",
                              "private": true
                          }
                      """.trimIndent()
                          )
                      }
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(
                              """
                          {
                              "player1": "",
                              "player2": "alex@hyperskill.org",
                              "size": "3x6",
                              "private": true
                          }
                      """.trimIndent()
                          )
                      }
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(
                              """
                          {
                              "player1": "",
                              "player2": "alex@hyperskill.org",
                              "size": "3x6",
                              "private": true
                          }
                      """.trimIndent()
                          )
                      }
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(
                              """
                          {
                              "player1": "",
                              "player2": "alex@hyperskill.org",
                              "size": "3x6",
                              "private": true
                          }
                      """.trimIndent()
                          )
                      }
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(
                              """
                          {
                              "player1": "",
                              "player2": "alex@hyperskill.org",
                              "size": "3x6",
                              "private": true
                          }
                      """.trimIndent()
                          )
                      }
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(
                              """
                          {
                              "player1": "",
                              "player2": "alex@hyperskill.org",
                              "size": "11x6",
                              "private": false
                          }
                      """.trimIndent()
                          )
                      }
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(
                              """
                          {
                              "player1": "",
                              "player2": "alex@hyperskill.org",
                              "size": "12x6",
                              "private": false
                          }
                      """.trimIndent()
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/games?page=0") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /games?page=0")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /games?page=0")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("totalPages", isInteger(2))
                                  .value("totalElements", isInteger(12))
                                  .value("page", isInteger(0))
                                  .value("size", isInteger(10))
                                  .value("numberOfElements", isInteger(10))
                                  .value(
                                      "content",
                                      isArray(10)
                                          .item(
                                              0,
                                              isObject()
                                                  .value("game_id", isInteger(1))
                                                  .value("player1", compile("mira@hyperskill.org"))
                                                  .value("player2", compile(""))
                                                  .value("size", compile("4x3"))
                                                  .value("private", isBoolean(false))
                                          )
                                          .item(
                                              1,
                                              isObject()
                                                  .value("game_id", isInteger(2))
                                                  .value("player1", compile(""))
                                                  .value("player2", compile("alex@hyperskill.org"))
                                                  .value("size", compile("3x6"))
                                                  .value("private", isBoolean(false))
                                          )
                                          .item(
                                              2,
                                              isObject()
                                                  .value("game_id", isInteger(3))
                                                  .value("player1", compile(""))
                                                  .value("player2", compile("alex@hyperskill.org"))
                                                  .value("size", compile("3x6"))
                                                  .value("private", isBoolean(true))
                                          )
                                          .item(
                                              3,
                                              isObject()
                                                  .value("game_id", isInteger(4))
                                                  .value("player1", compile(""))
                                                  .value("player2", compile("alex@hyperskill.org"))
                                                  .value("size", compile("3x6"))
                                                  .value("private", isBoolean(true))
                                          )
                                          .item(
                                              4,
                                              isObject()
                                                  .value("game_id", isInteger(5))
                                                  .value("player1", compile(""))
                                                  .value("player2", compile("alex@hyperskill.org"))
                                                  .value("size", compile("3x6"))
                                                  .value("private", isBoolean(true))
                                          )
                                          .item(
                                              5,
                                              isObject()
                                                  .value("game_id", isInteger(6))
                                                  .value("player1", compile(""))
                                                  .value("player2", compile("alex@hyperskill.org"))
                                                  .value("size", compile("3x6"))
                                                  .value("private", isBoolean(true))
                                          )
                                          .item(
                                              6,
                                              isObject()
                                                  .value("game_id", isInteger(7))
                                                  .value("player1", compile(""))
                                                  .value("player2", compile("alex@hyperskill.org"))
                                                  .value("size", compile("3x6"))
                                                  .value("private", isBoolean(true))
                                          )
                                          .item(
                                              7,
                                              isObject()
                                                  .value("game_id", isInteger(8))
                                                  .value("player1", compile(""))
                                                  .value("player2", compile("alex@hyperskill.org"))
                                                  .value("size", compile("3x6"))
                                                  .value("private", isBoolean(true))
                                          )
                                          .item(
                                              8,
                                              isObject()
                                                  .value("game_id", isInteger(9))
                                                  .value("player1", compile(""))
                                                  .value("player2", compile("alex@hyperskill.org"))
                                                  .value("size", compile("3x6"))
                                                  .value("private", isBoolean(true))
                                          )
                                          .item(
                                              9,
                                              isObject()
                                                  .value("game_id", isInteger(10))
                                                  .value("player1", compile(""))
                                                  .value("player2", compile("alex@hyperskill.org"))
                                                  .value("size", compile("3x6"))
                                                  .value("private", isBoolean(true))
                                          )
                                  )
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/games?page=1") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /games?page=1")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /games?page=1")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("totalPages", isInteger(2))
                                  .value("totalElements", isInteger(12))
                                  .value("page", isInteger(1))
                                  .value("size", isInteger(10))
                                  .value("numberOfElements", isInteger(2))
                                  .value(
                                      "content",
                                      isArray(2)
                                          .item(
                                              0,
                                              isObject()
                                                  .value("game_id", isInteger(11))
                                                  .value("player1", compile(""))
                                                  .value("player2", compile("alex@hyperskill.org"))
                                                  .value("size", compile("11x6"))
                                                  .value("private", isBoolean(false))
                                          )
                                          .item(
                                              1,
                                              isObject()
                                                  .value("game_id", isInteger(12))
                                                  .value("player1", compile(""))
                                                  .value("player2", compile("alex@hyperskill.org"))
                                                  .value("size", compile("12x6"))
                                                  .value("private", isBoolean(false))
                                          )
                                  )
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/games/my?page=1") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /games/my?page=1")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /games/my?page=1")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("totalPages", isInteger(2))
                                  .value("totalElements", isInteger(11))
                                  .value("page", isInteger(1))
                                  .value("size", isInteger(10))
                                  .value("numberOfElements", isInteger(1))
                                  .value(
                                      "content",
                                      isArray(1)
                                          .item(
                                              0,
                                              isObject()
                                                  .value("game_id", isInteger(12))
                                                  .value("game_status", isString("game not started"))
                                                  .value(
                                                      "field",
                                                      isArray(12)
                                                          .item(0, isArray(" ", " ", " ", " ", " ", " "))
                                                          .item(1, isArray(" ", " ", " ", " ", " ", " "))
                                                          .item(2, isArray(" ", " ", " ", " ", " ", " "))
                                                          .item(3, isArray(" ", " ", " ", " ", " ", " "))
                                                          .item(4, isArray(" ", " ", " ", " ", " ", " "))
                                                          .item(5, isArray(" ", " ", " ", " ", " ", " "))
                                                          .item(6, isArray(" ", " ", " ", " ", " ", " "))
                                                          .item(7, isArray(" ", " ", " ", " ", " ", " "))
                                                          .item(8, isArray(" ", " ", " ", " ", " ", " "))
                                                          .item(9, isArray(" ", " ", " ", " ", " ", " "))
                                                          .item(10, isArray(" ", " ", " ", " ", " ", " "))
                                                          .item(11, isArray(" ", " ", " ", " ", " ", " "))
                                                  )
                                                  .value("player1", compile(""))
                                                  .value("player2", compile("alex@hyperskill.org"))
                                                  .value("size", compile("12x6"))
                                                  .value("private", isBoolean(false))
                                                  .value("token", isString(""))
                                          )
                                  )
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/2/join") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(" { } ")
                      }
      
                      handleRequest(HttpMethod.Get, "/games/my?page=0") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /games/my?page=0")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /games/my?page=0")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("totalPages", isInteger(1))
                                  .value("totalElements", isInteger(2))
                                  .value("page", isInteger(0))
                                  .value("size", isInteger(10))
                                  .value("numberOfElements", isInteger(2))
                                  .value(
                                      "content",
                                      isArray(2)
                                          .item(
                                              0,
                                              isObject()
                                                  .value("game_id", isInteger(1))
                                                  .value("game_status", isString("game not started"))
                                                  .value(
                                                      "field",
                                                      isArray(4)
                                                          .item(0, isArray(" ", " ", " "))
                                                          .item(1, isArray(" ", " ", " "))
                                                          .item(2, isArray(" ", " ", " "))
                                                          .item(3, isArray(" ", " ", " "))
                                                  )
                                                  .value("player1", compile("mira@hyperskill.org"))
                                                  .value("player2", compile(""))
                                                  .value("size", compile("4x3"))
                                                  .value("private", isBoolean(false))
                                                  .value("token", isString(""))
                                          )
                                          .item(
                                              1,
                                              isObject()
                                                  .value("game_id", isInteger(2))
                                                  .value("game_status", isString("1st player's move"))
                                                  .value(
                                                      "field",
                                                      isArray(3)
                                                          .item(0, isArray(" ", " ", " ", " ", " ", " "))
                                                          .item(1, isArray(" ", " ", " ", " ", " ", " "))
                                                          .item(2, isArray(" ", " ", " ", " ", " ", " "))
                                                  )
                                                  .value("player1", compile("mira@hyperskill.org"))
                                                  .value("player2", compile("alex@hyperskill.org"))
                                                  .value("size", compile("3x6"))
                                                  .value("private", isBoolean(false))
                                                  .value("token", isString(""))
                                          )
                                  )
                          )
                      }
      
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
      
      }
    learner_created: false
  - name: src/tictactoeonline/models/Users.kt
    visible: true
    text: |
      package tictactoeonline.models
      
      import org.jetbrains.exposed.dao.IntEntity
      import org.jetbrains.exposed.dao.IntEntityClass
      import org.jetbrains.exposed.dao.id.EntityID
      import org.jetbrains.exposed.dao.id.IntIdTable
      
      import org.jetbrains.exposed.sql.transactions.transaction
      
      
      object Users : IntIdTable() {
          val email = varchar("email", 255).uniqueIndex()
          val password = varchar("password", 64)
      }
      
      
      class UserDAO(id: EntityID<Int>) : IntEntity(id) {
          companion object : IntEntityClass<UserDAO>(Users)
      
          var email by Users.email
          var password by Users.password
      }
      
      class UsersRepository {
          fun create(email: String, password: String) = transaction {
              UserDAO.new {
                  this.email = email
                  this.password = password
              }
          }
      
          fun update(id: Int, newEmail: String?, newPassword: String?) = transaction {
              UserDAO.findById(id)?.apply {
                  if (newEmail != null) this.email = newEmail
                  if (newPassword != null) this.password = newPassword
              }
          }
      
          fun delete(id: Int) = transaction {
              UserDAO.findById(id)?.delete() != null
          }
      
          fun find(id: Int) = transaction {
              UserDAO.findById(id)
              // User.find { Users.id eq id }.singleOrNull() - same as above
          }
      
          fun all() = transaction {
              UserDAO.all().toList()
          }
      
          fun updateByEmail(newEmail: String) = transaction {
              UserDAO.find { Users.email eq newEmail }.singleOrNull()?.apply {
                  this.email  = newEmail
              }
          }
      
          fun deleteByEmail(email: String) = transaction {
              UserDAO.find { Users.email eq email }.singleOrNull()?.delete() != null
          }
      
          fun findByEmail(email: String) = transaction {
              UserDAO.find { Users.email eq email }.singleOrNull()
          }
      
      }
    learner_created: true
  - name: src/tictactoeonline/plugins/Routing.kt
    visible: true
    text: |-
      package tictactoeonline.plugins
      
      import com.auth0.jwt.JWT
      import com.auth0.jwt.algorithms.Algorithm
      import io.ktor.application.*
      import io.ktor.auth.*
      import io.ktor.auth.jwt.*
      import io.ktor.http.*
      import io.ktor.request.*
      import io.ktor.routing.*
      import io.ktor.response.*
      import kotlinx.serialization.Serializable
      import kotlinx.serialization.json.*
      import kotlinx.serialization.*
      import org.jetbrains.exposed.sql.transactions.transaction
      import tictactoeonline.*
      import tictactoeonline.models.*
      
      
      @Serializable
      data class UserDeserializer(val email: String, val password: String)
      
      @Serializable
      data class NewGameSetupDeserializer(val player1: String, val player2: String, val size: String, val private: Boolean)
      
      @Serializable
      data class GamePathSuccessRespondSerializer(
          var game_id: Int,
          var status: String,
          var player1: String? = null,
          var player2: String? = null,
          var size: String? = null,
          var private: Boolean,
          var token: String?
      )
      
      
      @Serializable
      data class GameRegistrar(
          var game_id: Int,
          var player1: String,
          var player2: String,
          var size: String,
          var private: Boolean,
      )
      
      @Serializable
      data class GameStatusRespond(
          var game_id: Int,
          var game_status: String,
          var field: MutableList<MutableList<String>>,
          var player1: String,
          var player2: String,
          var size: String,
          var private: Boolean,
          var token: String,
      )
      
      
      @Serializable
      data class Game(
          var game_id: Int,
          var game_status: String,
          var field: MutableList<MutableList<String>>? = null,
          var player1: String? = null,
          var player2: String? = null,
          var size: String? = null
      )
      
      @Serializable
      enum class GameStatus(val status: String) {
          NOT_STARTED("game not started"),
          NEW_GAME_STARTED("New game started"),
          FIRST_PLAYER_MOVE("1st player's move"),
          SECOND_PLAYER_MOVE("2nd player's move"),
          FIRST_PLAYER_WON("1st player won"),
          SECOND_PLAYER_WON("2nd player won"),
          DRAW("draw");
      
          override fun toString(): String {
              return status
          }
      }
      
      
      
      @Serializable
      data class RespondsForGameStep(
          var game_id: Int,
          var status: String,
          var player1: String? = null,
          var player2: String? = null,
          var size: String? = null
      )
      
      
      @Serializable
      enum class RespondsStatus(val status: String) {
          NEW_GAME_STARTER("New game started"),
          FIRST_PLAYER_MOVE("1st player's move"),
          SECOND_PLAYER_MOVE("2nd player's move"),
          FIRST_PLAYER_WON("1st player won"),
          SECOND_PLAYER_WON("2nd player won"),
          DRAW("draw");
      
          override fun toString(): String {
              return status
          }
      }
      
      @Serializable
      data class PlayerMove(val move: String)
      
      // To store all successfully registered emails
      @Serializable
      val registeredEmails = mutableMapOf<String, String>()
      
      @Serializable
      var allGames = mutableListOf<Game>()
      
      var GAMEID = 1
      
      fun validateJsonUser(userJson: String): UserDeserializer? {
          val user = Json.decodeFromString<UserDeserializer>(userJson)
          print("userSerializable = $user")
      
          // check if email and passwords are blank
          if (user.email.isBlank() || user.password.isBlank()) {
              return null
          }
          return user
      }
      
      fun createJWTokenForGame(email: String): String? {
          return JWT.create()
              .withClaim("email", email)
              .sign(Algorithm.HMAC256(secret))
      }
      
      fun generateRandomToken(): String {
          val allowedChars = ('A'..'Z') + ('a'..'z') + ('0'..'9')
          return (1..32)
              .map { allowedChars.random() }
              .joinToString("")
      }
      
      fun getEmailFromJWT(call: ApplicationCall): String {
          val principal = call.principal<JWTPrincipal>()
          val userEmail = principal!!.payload.getClaim("email").asString()
          val authorizationHeader = call.request.header("Authorization")
          val jwtToken = authorizationHeader?.removePrefix("Bearer ")
          println("jwtToken = $jwtToken")
          println("userEmail from Token = $userEmail")
          return userEmail
      }
      
      val userRepository = UsersRepository()
      
      fun Application.configureRouting() {
          val usersRepository = UsersRepository()
          val gameRepository = GamesRepository()
          val gameRoomsRepository = GameRoomsRepository()
      
          routing {
      
              post("/signup") {
                  println()
                  println("post(\"/signup\")")
      
                  val userJson = call.receiveText()
                  println("userJson = $userJson")
      
                  try {
                      val deserializedUser = validateJsonUser(userJson) ?: throw Exception("Wrong Json input")
                      println("deserializedUser = $deserializedUser")
      
                      // Add user to DB
                      val userDAO = usersRepository.create(deserializedUser.email, deserializedUser.password)
                      call.respondText(
                          text = Json.encodeToString(mapOf("status" to "Signed Up")),
                          contentType = ContentType.Application.Json,
                          status = HttpStatusCode.OK
                      )
                  } catch (_: Exception) {
                      call.respondText(
                          text = Json.encodeToString(mapOf("status" to "Registration failed")),
                          contentType = ContentType.Application.Json,
                          status = HttpStatusCode.Forbidden
                      )
                  }
              }  // end of post("/signup")
      
              post("/signin") {
                  println()
                  println("post(\"/signin\")")
      
                  val userJson = call.receiveText()
                  println("userJson = $userJson")
      
                  transaction {
                      println("allUser = ${UserDAO.all().map { it.email }}")
                  }
      
                  try {
                      val deserializedUser = validateJsonUser(userJson) ?: throw Exception("Wrong Json input")
                      println("deserializedUser = $deserializedUser")
      
                      val userDAO = usersRepository.findByEmail(deserializedUser.email)
                      println("userDAO = ${userDAO?.email} ${userDAO?.password}")
                      if (userDAO == null) throw Exception("No such user exists")
                      if (userDAO.password != deserializedUser.password) throw Exception("No such user exists")
      
                      val token = createJWTokenForGame(deserializedUser.email) ?: throw Exception("Unable to create JWT token")
      
                      call.respondText(
                          text = Json.encodeToString(mapOf("status" to "Signed In", "token" to token)),
                          contentType = ContentType.Application.Json,
                          status = HttpStatusCode.OK
                      )
                      println("token = $token")
                  } catch (_:Exception) {
                      call.respondText(
                          text = Json.encodeToString(mapOf("status" to "Authorization failed")),
                          contentType = ContentType.Application.Json,
                          status = HttpStatusCode.Forbidden
                      )
                  }
              }  // end of post("/signin")
      
      
              authenticate("gameAuth") {
      
                  post("/game") {
                      println()
                      println("post(\"/game\")")
                      try {
                          transaction {
                              println("allUser = ${UserDAO.all().map { it.email }}")
                          }
      
                          val userEmail = getEmailFromJWT(call)
      
                          val gameSetupJson = call.receiveText()
                          println("call.receiveText() = $gameSetupJson, isBlank = ${gameSetupJson.isBlank()}")
      
                          val newGameSetup = Json.decodeFromString<NewGameSetupDeserializer>(gameSetupJson)
                          println("newGameSetup = $newGameSetup")
      
                          println(!(userEmail != newGameSetup.player1 || userEmail != newGameSetup.player2))
                          if (!(userEmail != newGameSetup.player1 || userEmail != newGameSetup.player2)) throw Exception("Wrong Game setup")
                          println("After")
                          println("findByEmail(newGameSetup.player1) = ${usersRepository.findByEmail(newGameSetup.player1)}")
                          println("findByEmail(newGameSetup.player2) = ${usersRepository.findByEmail(newGameSetup.player2)}")
      
                          // Create GameDB
                          val player1 = if (newGameSetup.player1 == userEmail) usersRepository.findByEmail(newGameSetup.player1) else null
                          val player2 = if (newGameSetup.player2 == userEmail) usersRepository.findByEmail(newGameSetup.player2) else null
                          val size = newGameSetup.size
                          val private = newGameSetup.private
                          val field = Json.encodeToString(sizeToMListOfMList(size))
                          val ranToken = if (private) generateRandomToken() else null
      
                          val gameDAO = gameRepository.create(GAMEID++, field, player1, player2, size, private, ranToken)
      
                          println("gameDAO = $gameDAO")
      
                          val successGamePathRespond = GamePathSuccessRespondSerializer(
                                  game_id = transaction { gameDAO.game_id },
                                  status = transaction { gameDAO.gameStatus },
                                  player1 = transaction { gameDAO.player1?.email ?: ""},
                                  player2 = transaction { gameDAO.player2?.email ?: ""},
                                  size = transaction { gameDAO.size },
                                  private = transaction { gameDAO.isPrivate },
                                  token =  transaction { gameDAO.token ?: ""},
                              )
      
                          println("try => successGamePathRespond = ${Json.encodeToString(successGamePathRespond)}")
      
                          transaction {
                              val allGames = GameDAO.all().map { Pair(it.id.value, it.game_id) to Pair(it.player1?.email, it.player2?.email) }
                              println("allGames = $allGames")
                          }
      
                          call.respondText(
                              text = Json.encodeToString(successGamePathRespond),
                              contentType = ContentType.Application.Json,
                              status = HttpStatusCode.OK
                          )
      
                          println("NOW what")
                      } catch (e: Exception) {
                          println("catch => Creating a game failed")
                          println("e = $e")
                          println("${e.message}, ${e.cause}, ${e.localizedMessage}")
                          call.respondText(
                              text = Json.encodeToString(mapOf("status" to "Creating a game failed")),
                              contentType = ContentType.Application.Json,
                              status = HttpStatusCode.Forbidden
                          )
                      }
      
                  }  // end of post("/game")
      
                  post("/game/{game_id}/join/{token?}") {
                      println()
                      val game_id = call.parameters["game_id"]?.toInt()
                      val token = call.parameters["token"]
                      println("post(\"/game/$game_id/join/$token\")")
      
                      try {
                          if (game_id == null) throw Exception("No such game_id was inserted")
      
      //                    val game = allGames.find { it.game_id == id } ?: throw Exception("No game with game_id = $id")
                          val game = gameRepository.findGameByGameId(game_id) ?: throw Exception("No game with game_id = $game_id")
                          println("Game: game_id=${game.game_id}, player1=${transaction { game.player1?.email }}, player2=${ transaction { game.player2?.email }}, token=${game.token}}")
      
      //                    if (game.isPrivate && token == null) throw Exception("Game is private, no token provided!")
                           if (game.token != token) throw Exception("Game is private, no token provided!")
      
                          val player1 = transaction { game.player1?.email }
                          val player2 = transaction { game.player2?.email }
      
                          if(!(player1 == null || player2 == null)) throw Exception("Not your game to join")
      
                          val principal = call.principal<JWTPrincipal>()
                          val email = principal!!.payload.getClaim("email").asString()
                          println("email from token = $email")
      
                          val userDAO = usersRepository.findByEmail(email) ?: throw Exception("No such user game to join")
      
                          val playerAdded = gameRepository.addPlayer(game.id.value, userDAO) ?: throw Exception("Game was not added!")
                          val statusUpdated = gameRepository.updateStatus(game.id.value, GameStatus.FIRST_PLAYER_MOVE.status) ?: throw Exception("Game status was not able to update 'status'")
      
                          call.respondText(
                              text = Json.encodeToString(mapOf("status" to "Joining the game succeeded")),
                              contentType = ContentType.Application.Json,
                              status = HttpStatusCode.OK
                          )
                      } catch (e: Exception) {
                          println("e= ${e.message}")
                          call.respondText(
                              text = Json.encodeToString(mapOf("status" to "Joining the game failed")),
                              contentType = ContentType.Application.Json,
                              status = HttpStatusCode.Forbidden
                          )
                      }
                  }  // post("/game/{game_id}/join")
      
                  post("/game/{game_id}/move") {
                      println()
                      val id = call.parameters["game_id"]?.toInt()
                      println("post(\"/game/$id/move\")")
                      try {
                          val game = allGames.find { it.game_id == id } ?: throw Exception("You have no rights to make this move")
                          val status = game.game_status
                          val player1 = game.player1!!
                          val player2 = game.player2!!
                          println("game = $game")
                          val receivedText = call.receiveText()
                          println("call.receiveText() = $receivedText")
      
                          val principal = call.principal<JWTPrincipal>()
                          val email = principal!!.payload.getClaim("email").asString()
                          println("email = $email")
      
                          val firstStatus = GameStatus.FIRST_PLAYER_MOVE.status
                          val secondStatus = GameStatus.SECOND_PLAYER_MOVE.status
      
                          if (status == firstStatus && email != player1) throw Exception("You have no rights to make this move")
                          if (status == secondStatus && email != player2) throw Exception("You have no rights to make this move")
      
      
                          val playerMove = Json.decodeFromString<PlayerMove>(receivedText)
                          val moveCoords = playerMove.move
                          val moveCoordsPair = getMoveCoords(moveCoords)
      
                          println("try => playerMove = ${Json.encodeToString(playerMove)}")
      
                          val fieldCoordsPair = getGameFieldCoords(game.size.toString())
                          val x = fieldCoordsPair.first
                          val y = fieldCoordsPair.second
                          val field = game.field!!
      
      
                          if (!validateMoveCoords(moveCoords, x, y, field)) throw Exception("Incorrect or impossible move")
      
                          val symbol = getPlayerSymbol(game.game_status)
                          val nextPlayerGameStatus = changePlayerTurn(game.game_status)
      
      
                          println("symbol = $symbol, nextPlayerGameStatus = $nextPlayerGameStatus")
      
                          if (game.game_status == GameStatus.FIRST_PLAYER_WON.status) throw Exception("You have no rights to make this move")
                          if (game.game_status == GameStatus.SECOND_PLAYER_WON.status) throw Exception("You have no rights to make this move")
      
                          insertMove(moveCoordsPair, field, symbol)
                          if (isWon(moveCoordsPair, field, symbol)) {
                              if (symbol == "X") game.game_status = GameStatus.FIRST_PLAYER_WON.status
                              else game.game_status = GameStatus.SECOND_PLAYER_WON.status
                          } else if (isDraw(field)) {
                              game.game_status = GameStatus.DRAW.status
                          } else {
                              game.game_status = nextPlayerGameStatus
                          }
      
      
                          call.respondText(
                              text = Json.encodeToString(mapOf("status" to "Move done")),
                              contentType = ContentType.Application.Json,
                              status = HttpStatusCode.OK
                          )
                          println("move DONE")
                      } catch (e: Exception) {
                          println("move FAILED")
                          if (e.message == "You have no rights to make this move") {
                              call.respondText(
                                  text = Json.encodeToString(mapOf("status" to "${e.message}")),
                                  contentType = ContentType.Application.Json,
                                  status = HttpStatusCode.Forbidden
                              )
                          } else {
                              call.respondText(
                                  text = Json.encodeToString(mapOf("status" to "${e.message}")),
                                  contentType = ContentType.Application.Json,
                                  status = HttpStatusCode.BadRequest
                              )
                          }
                      }
                  }  // end of post("/game/{game_id}/move")
      
                  get("/game/{game_id}/status") {
                      println()
                      val game_id = call.parameters["game_id"]?.toInt()
                      println("get(\"/game/$game_id/status\")")
                      try {
                          if (game_id == null) throw Exception("No such game_id was inserted")
      
                          // val game = allGames.find { it.game_id == game_id } ?: throw Exception("No game with game_id = $game_id")
      
                          val gameDAO = gameRepository.findGameByGameId(game_id) ?: throw Exception("No game with id=$game_id")
                          val player1 = transaction { gameDAO.player1?.email }
                          val player2 = transaction { gameDAO.player2?.email }
      
                          val principal = call.principal<JWTPrincipal>()
                          val email = principal!!.payload.getClaim("email").asString()
                          println("email = $email")
      
                          println("-------------------------------------------")
                          println("Game: game_id=${gameDAO.game_id}, player1=${transaction { gameDAO.player1?.email }}, player2=${ transaction { gameDAO.player2?.email }}, token=${gameDAO.token}}")
                          println("-------------------------------------------")
      
                          if(!(email == player1 || email == player2)) throw Exception("Not your game to check")
      
                          val gameStatusRespond = GameStatusRespond(
                              game_id = gameDAO.game_id,
                              game_status = gameDAO.gameStatus,
                              field = Json.decodeFromString(gameDAO.field),
                              player1 = player1 ?: "",
                              player2 = player2 ?: "",
                              size = gameDAO.size,
                              private = gameDAO.isPrivate,
                              token = gameDAO.token ?: ""
                          )
      
                          call.respondText(
                              text = Json.encodeToString(gameStatusRespond),
                              contentType = ContentType.Application.Json,
                              status = HttpStatusCode.OK
                          )
                      } catch (e: Exception) {
                          call.respondText(
                              text = Json.encodeToString(mapOf("status" to "Failed to get game status")),
                              contentType = ContentType.Application.Json,
                              status = HttpStatusCode.Forbidden
                          )
                      }
      
      
      
                  } // end of get("/game/{game_id}/status")
      
                  get("/games") {
                      println()
                      println("get(\"/games\")")
      
                      println("allGames = ${Json.encodeToString(allGames)}")
      
                      val registeredGames = mutableListOf<GameRegistrar>()
                      transaction {
                          val allGames = GameDAO.all().map { it }
                          for (game in allGames) {
                              registeredGames.add(
                                  GameRegistrar(
                                      game_id = game.game_id,
                                      player1 = game.player1?.email ?: "",
                                      player2 = game.player2?.email ?: "",
                                      size =game.size,
                                      private = game.isPrivate
                                  )
                              )
                          }
                      }
      
                      println("registeredGames = $registeredGames")
      
                      call.respondText(
                          text = Json.encodeToString(registeredGames),
                          contentType = ContentType.Application.Json,
                          status = HttpStatusCode.OK
                      )
                  }  // end of get("/games")
      
              } // end of authenticate("gameAuth")
      
          }  // end_of_routing {}
      }  // end Application.configure()
      
      fun doesEmailExist(email: String): Boolean {
          return registeredEmails.contains(email)
      }
      
      
      
      fun getPlayerSymbol(player: String): String {
          return if (player == GameStatus.FIRST_PLAYER_MOVE.status) "X" else "O"
      }
      
      fun changePlayerTurn(player: String): String {
          println("player = $player")
          return if (player == GameStatus.FIRST_PLAYER_MOVE.status) GameStatus.SECOND_PLAYER_MOVE.status else GameStatus.FIRST_PLAYER_MOVE.status
      }
      
      // ------Initial Setup Functions---mostly used in get("/post")--------//
      fun initialSetupOfRespondAndGame(newGameSetupDeserializer: NewGameSetupDeserializer): Pair<RespondsForGameStep, Game> {
          val respondForGameStep = getRespondForGameStep(
              status = RespondsStatus.NEW_GAME_STARTER.status,
              player1 = newGameSetupDeserializer.player1,
              player2 = newGameSetupDeserializer.player2,
              size = newGameSetupDeserializer.size
          )
      
          val newGame = newGameInitialSetup(
              GameStatus.NOT_STARTED.status,
              respondForGameStep.player1.toString(),
              respondForGameStep.player2.toString(),
              respondForGameStep.size.toString()
          )
          allGames.add(newGame)
      
          GAMEID++
      
          return Pair(respondForGameStep, newGame)
      }
      
      fun getRespondForGameStep(status: String, player1: String?, player2: String?, size: String?): RespondsForGameStep {
          var validatedSize = size
          if (size != null) {
              val fieldCoordPair = getGameFieldCoords(size)
              validatedSize = "${fieldCoordPair.first}x${fieldCoordPair.second}"
          }
          return RespondsForGameStep(
              game_id = GAMEID,
              status = status,
              player1 = player1,
              player2 = player2,
              size = validatedSize
          )
      }
      
      //fun registerNewGames(gamesToRegister: MutableList<GameRegistrar>, game_id: Int, player1: String, player2: String, size: String) {
      //    gamesToRegister.add(GameRegistrar(game_id, player1, player2, size))
      //}
      
      fun newGameInitialSetup(gameStatus: String, player1: String, player2: String, size: String): Game {
          // generate the fieldListOfList
          val fieldCoordsPair = getGameFieldCoords(size)
          val x = fieldCoordsPair.first
          val y = fieldCoordsPair.second
          val fieldListOfList = createListOfListField(x, y)
      
          return Game(
              game_id = GAMEID,
              game_status = gameStatus,
              field = fieldListOfList,
              player1 = player1,
              player2 = player2,
              size = size
          )
      }
      
      
      
      // ------ END Of Initial Setup Functions---mostly used in get("/post")--------//
      
      
      
      //                    var gameDAO = transaction {
      //                        val player1Json = if (newGameSetup.player1 == "") null else newGameSetup.player1
      //                        val player2Json = if (newGameSetup.player2 == "") null else newGameSetup.player2
      //                        val sizeJson = newGameSetup.size
      //                        val privateJson = newGameSetup.private
      //                        for (game in GameDAO.all()) {
      //                            val player1 = game.player1?.email
      //                            val player2 = game.player2?.email
      //                            val size = game.size
      //                            val private = game.isPrivate
      //                            if (player1Json == player1 && player2Json == player2 && sizeJson == size && privateJson == private) {
      //                                return@transaction game
      //                            }
      //                        }
      //                        return@transaction null
      //                    }
      //
      //                    println("gameDAO = $gameDAO")
    learner_created: true
  - name: src/tictactoeonline/models/Games.kt
    visible: true
    text: |+
      package tictactoeonline.models
      
      import org.jetbrains.exposed.dao.IntEntity
      import org.jetbrains.exposed.dao.IntEntityClass
      import org.jetbrains.exposed.dao.id.EntityID
      import org.jetbrains.exposed.dao.id.IntIdTable
      import org.jetbrains.exposed.sql.Column
      
      import org.jetbrains.exposed.sql.transactions.transaction
      import tictactoeonline.plugins.GameStatus
      
      
      object Games : IntIdTable() {
          val game_id = integer("game_id")
          val gameStatus: Column<String> = varchar("game_status", 20)
          val field: Column<String> = text("field")
          val player1 = reference("player1", Users).nullable()
          val player2 = reference("player2", Users).nullable()
          val size: Column<String> = varchar("size", 10)
          val isPrivate: Column<Boolean> = bool("private")
          val token: Column<String?> = varchar("token", 32).nullable()
      }
      
      class GameDAO(id: EntityID<Int>) : IntEntity(id) {
          companion object: IntEntityClass<GameDAO>(Games)
      
          var game_id by Games.game_id
          var gameStatus by Games.gameStatus
          var field by Games.field
          var player1 by UserDAO optionalReferencedOn Games.player1
          var player2 by UserDAO optionalReferencedOn Games.player2
          var size by Games.size
          var isPrivate by Games.isPrivate
          var token by Games.token
      }
      
      class GamesRepository {
          fun create(game_id: Int, field: String, player1: UserDAO?, player2: UserDAO?, size: String, private: Boolean, token: String?) = transaction {
              GameDAO.new {
                  this.game_id = game_id
                  this.gameStatus = GameStatus.NEW_GAME_STARTED.status
                  this.field = field
                  this.player1 = player1
                  this.player2 = player2
                  this.size = size
                  this.isPrivate = private
                  this.token = token
              }
          }
      
          fun addPlayer(id: Int, player: UserDAO) = transaction {
              GameDAO.findById(id)?.apply {
                  if (this.player1 == null && this.player2 != null) this.player1 = player
                  if (this.player1 != null && this.player2 == null) this.player2 = player
              }
          }
      
          fun updateStatus(id: Int, status: String) = transaction {
              GameDAO.findById(id)?.apply {
                  this.gameStatus = status
              }
          }
      
          fun updateField(id: Int, field: String) = transaction {
              GameDAO.findById(id)?.apply {
                  this.field = field
              }
          }
      
          fun findGameByGameId(game_id: Int) = transaction {
              // choose last one
              var foundGame: GameDAO? = null
              for (game in GameDAO.all()) {
                  if (game.game_id == game_id) foundGame = game
              }
              return@transaction foundGame
          }
      }
    
    
    learner_created: true
  - name: src/tictactoeonline/models/GameRooms.kt
    visible: true
    text: |-
      package tictactoeonline.models
      
      import org.jetbrains.exposed.dao.IntEntity
      import org.jetbrains.exposed.dao.IntEntityClass
      import org.jetbrains.exposed.dao.id.EntityID
      import org.jetbrains.exposed.dao.id.IntIdTable
      import org.jetbrains.exposed.sql.transactions.transaction
      
      
      object GameRooms : IntIdTable() {
          val gameId = reference("game_id", Games)
          val creator = reference("creator", Users)
      }
      
      class GameRoomDAO(id: EntityID<Int>): IntEntity(id) {
          companion object: IntEntityClass<GameRoomDAO>(GameRooms)
      
          var gameId by GameDAO referencedOn GameRooms.gameId
          var creator by UserDAO referencedOn Users.email
      
      }
      
      class GameRoomsRepository {
          fun create(id: GameDAO, creator: UserDAO) = transaction {
              GameRoomDAO.new {
                  this.gameId = id
                  this.creator = creator
              }
          }
      }
    learner_created: true
  - name: src/tictactoeonline/ConsoleGame.kt
    visible: true
    text: |-
      package tictactoeonline
      
      fun gameConsoleVersion() {
          val bothPlayers = getBothPlayerNames()
          val player1 = bothPlayers.first
          val player2 = bothPlayers.second
      
          println("Enter the field size (3x3 by default)")
          val inputSize = readln().trim()
          val fieldCoords = getGameFieldCoords(inputSize)
          val x = fieldCoords.first
          val y = fieldCoords.second
          println("Field size: ${x}x${y}")
          val listOfListField = createListOfListField(x, y)
      //    for (e in listOfListField) println(e)
          prettyPrintField(listOfListField)
      
          var player = player1
          while (true) {
              println("Enter $player's move as (x,y)")
              val symbol = if (player == player1) "X" else "O"
              val moveString = readln().trim()
              val isCorrectMove = validateMoveCoords(moveString, x, y, listOfListField)
              if (!isCorrectMove) {
                  println("Wrong move entered")
                  continue
              } else {
                  val moveCoordsPair = getMoveCoords(moveString)
                  insertMove(moveCoordsPair, listOfListField, symbol)
                  prettyPrintField(listOfListField, false)
                  if (isWon(moveCoordsPair, listOfListField, symbol)) {
                      println("$player wins!")
                      break
                  }
                  if (isDraw(listOfListField)) {
                      println("Draw!")
                      break
                  }
              }
              println()
              player = if (player == player1) player2 else player1
          }
      }
      
      fun isWon(moveCoords: Pair<Int, Int>, field: MutableList<MutableList<String>>, symbol: String): Boolean {
      
          val xIndex = moveCoords.first - 1
          val yIndex = moveCoords.second - 1
      
          // 12 checks in total
      
          // 1. Up two times
          if (xIndex - 2 >= 0) {
              val cellOneAbove = field[xIndex - 1][yIndex]
              val cellTwoAbove = field[xIndex - 2][yIndex]
              if (cellOneAbove == symbol && cellTwoAbove == symbol) return true
          }
      
          // 2. Up one time and Down one time
          if (xIndex - 1 >= 0 && xIndex + 1 < field.size) {
              val cellOneAbove = field[xIndex - 1][yIndex]
              val cellOneBelow = field[xIndex + 1][yIndex]
              if (cellOneAbove == symbol && cellOneBelow == symbol) return true
          }
      
          // 3. Down two times
          if (xIndex + 2 < field.size) {
              val cellOneBelow = field[xIndex + 1][yIndex]
              val cellTwoBelow = field[xIndex + 2][yIndex]
              if (cellOneBelow == symbol && cellTwoBelow == symbol) return true
          }
      
          // 4. Right two times
          if (yIndex + 2 < field[0].size) {
              val cellOneToRight = field[xIndex][yIndex + 1]
              val cellTwoToRight = field[xIndex][yIndex + 2]
              if (cellOneToRight == symbol && cellTwoToRight == symbol) return true
          }
      
          // 5. Right one time and Left one time
          if (yIndex - 1 >= 0 && yIndex + 1 < field[0].size) {
              val cellOneToRight = field[xIndex][yIndex + 1]
              val cellOneToLeft = field[xIndex][yIndex - 1]
              if (cellOneToRight == symbol && cellOneToLeft == symbol) return true
          }
      
          // 6. Left two times
          if (yIndex - 2 >= 0) {
              val cellOneToLeft = field[xIndex][yIndex - 1]
              val cellTwoToLeft = field[xIndex][yIndex - 2]
              if (cellOneToLeft == symbol && cellTwoToLeft == symbol) return true
          }
      
          // 7. Diagonal Up Right two times
          if (xIndex - 2 > 0 && yIndex + 2 < field[0].size) {
              val cellOneDiagUpRight = field[xIndex - 1][yIndex + 1]
              val cellTwoDiagUpRight = field[xIndex - 2][yIndex + 2]
              if (cellOneDiagUpRight == symbol && cellTwoDiagUpRight == symbol) return true
          }
      
          // 8. Diagonal Up Right one time and Diagonal Down Left one time
          if (xIndex - 1 > 0 && yIndex + 1 < field[0].size && xIndex + 1 > field.size && yIndex - 1 > 0) {
              val cellOneDiagUpRight = field[xIndex - 1][yIndex + 1]
              val cellOneDiagDownRight = field[xIndex + 1][yIndex - 1]
              if (cellOneDiagUpRight == symbol && cellOneDiagDownRight == symbol) return true
          }
      
          // 9. Diagonal Down Right two times
          if (xIndex + 2 < field.size && yIndex + 2 < field[0].size) {
              val cellOneDiagDownRight = field[xIndex + 1][yIndex + 1]
              val cellTwoDiagDownRight = field[xIndex + 2][yIndex + 2]
              if (cellOneDiagDownRight == symbol && cellTwoDiagDownRight == symbol) return true
          }
      
      
          // 10. Diagonal Up Left two times
          if (xIndex - 2 > 0 && yIndex - 2 > 0) {
              val cellOneDiagUpLeft = field[xIndex - 1][yIndex - 1]
              val cellTwoDiagUpLeft = field[xIndex - 2][yIndex - 2]
              if (cellOneDiagUpLeft == symbol && cellTwoDiagUpLeft == symbol) return true
          }
      
          // 11. Diagonal Up Left one time and Diagonal Down Right one time
          if (xIndex - 1 > 0 && yIndex - 1 > 0 && xIndex + 1 < field.size && yIndex + 1 < field[0].size) {
              val cellOneDiagUpLeft = field[xIndex - 1][yIndex - 1]
              val cellOneDiagDownLeft = field[xIndex + 1][yIndex + 1]
              if (cellOneDiagUpLeft == symbol && cellOneDiagDownLeft == symbol) return true
          }
      
          // 12. Diagonal Down Left two times
          if (xIndex + 2 < field.size && yIndex - 2 > 0) {
              val cellOneDiagDownLeft = field[xIndex + 1][yIndex - 1]
              val cellTwoDiagDownLeft = field[xIndex + 2][yIndex - 2]
              if (cellOneDiagDownLeft == symbol && cellTwoDiagDownLeft == symbol) return true
          }
      
          return false
      }
      
      
      fun isDraw(field: MutableList<MutableList<String>>): Boolean {
          for (row in field){
              for (cell in row) {
                  if (cell.isBlank()) return false
              }
          }
          return true
      }
      
      fun insertMove(moveCoords: Pair<Int, Int>, field: MutableList<MutableList<String>>, symbol: String) {
          val x = moveCoords.first
          val y = moveCoords.second
          field[x-1][y-1] = symbol
      }
      
      fun getMoveCoords(moveCoords: String): Pair<Int, Int> {
          val coords = moveCoords.trim().removeSurrounding("(", ")")
              .split(",")
              .map {it.trim().toInt()}
      
          return Pair(coords[0], coords[1])
      }
      
      fun validateMoveCoords(moveCoords: String, x: Int, y: Int, field: MutableList<MutableList<String>>): Boolean {
      
          if(!syntaxCheckForCoords(moveCoords)) return false
      
          val moveCoordsPair = getMoveCoords(moveCoords)
      
          val xCoord = moveCoordsPair.first
          val yCoord = moveCoordsPair.second
      
          if (!(xCoord in 1..x && yCoord in 1..y)) return false
      
          val cell = field[xCoord - 1][yCoord - 1]
          return cell.isBlank()
      }
      
      fun syntaxCheckForCoords(moveCoords: String): Boolean {
          try {
              val coords = moveCoords.trim().removeSurrounding("(", ")")
                  .split(",")
                  .map {it.trim().toInt()}
              if (coords.size != 2) {
                  return false
              }
              return true
          } catch (e: Exception) {
              return false
          }
      }
      
      
      fun prettyPrintField(field: MutableList<MutableList<String>>, isEmpty: Boolean = true) {
          val numOfRows = field.size
          val numOfCols = field[0].size
      
          for (i in 0..numOfRows) {
              if (i > 0) {
                  for (j in 1..numOfCols) {
                      val cell = field[i-1][j-1]
                      if (cell.isNotEmpty() || cell.isNotBlank()) print("| $cell ")
                      else print("|   ")
                  }
                  print("|")
                  println()
              }
              for (j in 1..numOfCols) {
                  print("|---")
              }
              if (i == 0 && isEmpty) print("|-y")
              else print("|")
              println()
          }
          if (isEmpty){
              println("|")
              println("x")
          }
      }
      
      fun sizeToMListOfMList(size: String): MutableList<MutableList<String>> {
          val validSize = validateFieldSize(size)
          return createListOfListField(validSize.first, validSize.second)
      }
      
      fun createListOfListField(x: Int, y:Int): MutableList<MutableList<String>> {
          val outerList = mutableListOf<MutableList<String>>()
      
          for (i in 1..x) {
              val innerList = mutableListOf<String>()
              for (j in 1..y) {
                  innerList.add(" ")
              }
              outerList.add(innerList)
          }
          // println("outerList = $outerList")
          return outerList
      }
      
      fun getGameFieldCoords(inputSize: String): Pair<Int, Int> {
          val fieldCoordinates = validateFieldSize(inputSize)
          val x = fieldCoordinates.first
          val y = fieldCoordinates.second
          return Pair(x, y)
      }
      
      fun validateFieldSize(inputSize: String): Pair<Int, Int> {
          val pattern = Regex("\\d+x\\d+")
          val coordPair = if (pattern.matches(inputSize)) {
              val coordList = inputSize.split("x")
              val x = coordList[0].toInt()
              val y = coordList[1].toInt()
              if (x < 1 || y < 1) {
                  Pair(3, 3)
              } else if (x >= 3 || y >= 3) {
                  Pair(x, y)
              } else {
                  Pair(3, 3)
              }
          } else {
              Pair(3, 3)
          }
          return coordPair
      }
      
      fun getBothPlayerNames(): Pair<String, String> {
          println("Enter the first player's name (Player1 by default)")
          val player1 = readln().let { it.ifEmpty { "Player1" } }
          println("First player's name: $player1 ")
      
          println("Enter the second player's name (Player2 by default)")
          val player2 = readln().let { it.ifEmpty { "Player2" } }
          println("Second player's name: $player2 ")
      
          return Pair(player1, player2)
      }
      
      fun assignPlayerName(playerNum: Int, playerName: String): String {
          return playerName.ifEmpty { "Player${playerNum}" }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/30567#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 03 Oct 2023 13:17:15 UTC"
record: -1
