type: edu
files:
  - name: src/resources/application.conf
    visible: true
    text: |-
      ktor {
          deployment {
              port = 28852
          }
          application {
              modules = [tictactoeonline.ApplicationKt.module]
          }
      }
    learner_created: false
  - name: src/tictactoeonline/Application.kt
    visible: true
    text: |-
      package tictactoeonline
      
      fun main() {
          println("Hello World")
      }
    learner_created: false
  - name: build.gradle
    visible: true
    text: |-
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-serialization:$hs.kotlin.version"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'org.jetbrains.kotlin.jvm'
      apply plugin: 'kotlinx-serialization'
      version '1.0-SNAPSHOT'
      
      repositories {
          mavenCentral()
      }
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation "org.jetbrains.kotlin:kotlin-stdlib"
          implementation "io.ktor:ktor-server-core:1.6.7"
          implementation "io.ktor:ktor-server-netty:1.6.7"
          implementation "ch.qos.logback:logback-classic:1.2.10"
          implementation "io.ktor:ktor-serialization:1.6.7"
          implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.0"
          testImplementation "io.ktor:ktor-server-test-host:1.6.7"
      }
    learner_created: false
  - name: test/TicTacToeOnlineTest.kt
    visible: false
    text: |-
      import io.ktor.application.*
      import io.ktor.http.*
      import io.ktor.request.*
      import io.ktor.server.testing.*
      import kotlinx.serialization.Serializable
      import tictactoeonline.module
      import org.hyperskill.hstest.dynamic.DynamicTest
      import org.hyperskill.hstest.stage.StageTest
      import org.hyperskill.hstest.testcase.CheckResult
      import org.hyperskill.hstest.testing.expect.Expectation.expect
      import kotlinx.serialization.json.Json
      import kotlinx.serialization.decodeFromString
      import java.util.regex.Pattern.compile;
      import org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      
      @Serializable
      data class SigninResponse(val status: String, val token: String)
      
      class TicTacToeOnlineTest : StageTest<Any>() {
          @DynamicTest
          fun test1(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
                      handleRequest(HttpMethod.Post, "/signup") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("{ }")
                      }.apply {
                          if (response.status() != HttpStatusCode.Forbidden) {
                              result =
                                  CheckResult.wrong("Expected status: 403 Forbidden\nFound:${response.status()}\nRoute: /signup")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /signup")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Registration failed"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/signup") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody(""" { "email":"", "password":""} """)
                      }.apply {
                          if (response.status() != HttpStatusCode.Forbidden) {
                              result =
                                  CheckResult.wrong("Expected status: 403 Forbidden\nFound:${response.status()}\nRoute: /signup")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /signup")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Registration failed"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/signin") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody(""" { "email":"mike@hyperskill.org", "password":"1122"} """)
                      }.apply {
                          if (response.status() != HttpStatusCode.Forbidden) {
                              result =
                                  CheckResult.wrong("Expected status: 403 Forbidden\nFound:${response.status()}\nRoute: /signin")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /signin")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Authorization failed"))
                          )
                      }
      
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest
          fun test2(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
                      handleRequest(HttpMethod.Post, "/signup") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody(""" { "email":"alex@hyperskill.org", "password":"hs2023"} """)
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /signup")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /signup")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Signed Up"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/signup") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody(""" { "email":"mira@hyperskill.org", "password":"112233"} """)
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /signup")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /signup")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Signed Up"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/signup") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody(""" { "email":"alex@hyperskill.org", "password":"1234"} """)
                      }.apply {
                          if (response.status() != HttpStatusCode.Forbidden) {
                              result =
                                  CheckResult.wrong("Expected status: 403 Forbidden\nFound:${response.status()}\nRoute: /signup")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /signup")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Registration failed"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/signin") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody(""" { "email":"alex@hyperskill.org", "password":"1234"} """)
                      }.apply {
                          if (response.status() != HttpStatusCode.Forbidden) {
                              result =
                                  CheckResult.wrong("Expected status: 403 Forbidden\nFound:${response.status()}\nRoute: /signin")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /signin")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Authorization failed"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/signin") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody(""" { "email":"alex@hyperskill.org", "password":"hs2023"} """)
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /signin")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /signin")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Signed In"))
                                  .value("token", isString())
                          )
                          val resp: String = response.content!!
                          val jsonResponse = Json.decodeFromString<SigninResponse>(resp)
                          if (jsonResponse.token != "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8" &&
                              jsonResponse.token != "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.VQIBO0jQ8qW-308raJtSrvqufTEPDWcJyQsfwjnjTLQ"
                          ) {
                              result = CheckResult.wrong(
                                  """
                              Invalid login token!
                              Expected eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8 or eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.VQIBO0jQ8qW-308raJtSrvqufTEPDWcJyQsfwjnjTLQ
                              Found: ${jsonResponse.token}
                              Route: /signin
                          """.trimIndent()
                              )
                              return@apply
                          }
                      }
      
                      handleRequest(HttpMethod.Post, "/signin") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody(""" { "email":"mira@hyperskill.org", "password":"112233"} """)
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /signin")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /signin")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Signed In"))
                                  .value("token", isString())
                          )
                          val resp: String = response.content!!
                          val jsonResponse = Json.decodeFromString<SigninResponse>(resp)
                          if (jsonResponse.token != "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.Q5JRRLXBVRbu16BcvcQNUMj_WXrEmFDLPM5QZYA9DFA" &&
                              jsonResponse.token != "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          ) {
                              result = CheckResult.wrong(
                                  """
                              Invalid login token!
                              Expected eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.Q5JRRLXBVRbu16BcvcQNUMj_WXrEmFDLPM5QZYA9DFA or eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q
                              Found: ${jsonResponse.token}
                              Route: /signin
                          """.trimIndent()
                              )
                              return@apply
                          }
                      }
      
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest
          fun test3(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("{ }")
                      }.apply {
                          if (response.status() != HttpStatusCode.Unauthorized) {
                              result =
                                  CheckResult.wrong("Expected status: 401 Unauthorized\nFound:${response.status()}\nRoute: /game")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Authorization failed"))
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/games") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("{ }")
                      }.apply {
                          if (response.status() != HttpStatusCode.Unauthorized) {
                              result =
                                  CheckResult.wrong("Expected status: 401 Unauthorized\nFound:${response.status()}\nRoute: /games")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /games")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Authorization failed"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/1/join") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("{ }")
                      }.apply {
                          if (response.status() != HttpStatusCode.Unauthorized) {
                              result =
                                  CheckResult.wrong("Expected status: 401 Unauthorized\nFound:${response.status()}\nRoute: /game/1/join")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/join")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Authorization failed"))
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/game/1/status") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("{ }")
                      }.apply {
                          if (response.status() != HttpStatusCode.Unauthorized) {
                              result =
                                  CheckResult.wrong("Expected status: 401 Unauthorized\nFound:${response.status()}\nRoute: /game/1/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Authorization failed"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/1/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          setBody("{ }")
                      }.apply {
                          if (response.status() != HttpStatusCode.Unauthorized) {
                              result =
                                  CheckResult.wrong("Expected status: 401 Unauthorized\nFound:${response.status()}\nRoute: /game/1/move")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/move")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Authorization failed"))
                          )
                      }
      
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest
          fun test4(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(
                              """
                          {
                              "player1": "carl@example.com",
                              "player2": "",
                              "size": "4x3"
                          }
                      """.trimIndent()
                          )
                      }.apply {
                          if (response.status() != HttpStatusCode.Forbidden) {
                              result =
                                  CheckResult.wrong("Expected status: 403 Forbidden\nFound:${response.status()}\nRoute: /game")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Creating a game failed"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(
                              """
                          {
                              "player1": "mira@hyperskill.org",
                              "player2": "",
                              "size": "4x3"
                          }
                      """.trimIndent()
                          )
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("game_id", isInteger(1))
                                  .value("status", compile("New game started"))
                                  .value("player1", compile("mira@hyperskill.org"))
                                  .value("player2", compile(""))
                                  .value("size", compile("4x3"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(
                              """
                          {
                              "player1": "",
                              "player2": "alex@hyperskill.org",
                              "size": "3x6"
                          }
                      """.trimIndent()
                          )
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("game_id", isInteger(2))
                                  .value("status", compile("New game started"))
                                  .value("player1", compile(""))
                                  .value("player2", compile("alex@hyperskill.org"))
                                  .value("size", compile("3x6"))
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/games") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /games")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /games")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isArray(2)
                                  .item(
                                      0,
                                      isObject()
                                          .value("game_id", isInteger(1))
                                          .value("player1", compile("mira@hyperskill.org"))
                                          .value("player2", compile(""))
                                          .value("size", compile("4x3"))
                                  )
                                  .item(
                                      1,
                                      isObject()
                                          .value("game_id", isInteger(2))
                                          .value("player1", compile(""))
                                          .value("player2", compile("alex@hyperskill.org"))
                                          .value("size", compile("3x6"))
                                  )
                          )
                      }
      
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest
          fun test5(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
      
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(
                              """
                          {
                              "player1": "mira@hyperskill.org",
                              "player2": "",
                              "size": "4x3"
                          }
                      """.trimIndent()
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/game/1/status") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game/1/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("game_id", isInteger(1))
                                  .value("game_status", compile("game not started"))
                                  .value(
                                      "field",
                                      isArray(4)
                                          .item(0, isArray(" ", " ", " "))
                                          .item(1, isArray(" ", " ", " "))
                                          .item(2, isArray(" ", " ", " "))
                                          .item(3, isArray(" ", " ", " "))
                                  )
                                  .value("player1", compile("mira@hyperskill.org"))
                                  .value("player2", compile(""))
                                  .value("size", compile("4x3"))
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/game/1/status") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.Forbidden) {
                              result =
                                  CheckResult.wrong("Expected status: 403 Forbidden\nFound:${response.status()}\nRoute: /game/1/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Failed to get game status"))
                          )
                      }
      
      
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest
          fun test6(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
      
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(
                              """
                          {
                              "player1": "mira@hyperskill.org",
                              "player2": "",
                              "size": "4x3"
                          }
                      """.trimIndent()
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/1/join") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game/1/join")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/join")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Joining the game succeeded"))
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/game/1/status") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game/1/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("game_id", isInteger(1))
                                  .value("game_status", compile("1st player's move"))
                                  .value(
                                      "field",
                                      isArray(4)
                                          .item(0, isArray(" ", " ", " "))
                                          .item(1, isArray(" ", " ", " "))
                                          .item(2, isArray(" ", " ", " "))
                                          .item(3, isArray(" ", " ", " "))
                                  )
                                  .value("player1", compile("mira@hyperskill.org"))
                                  .value("player2", compile("alex@hyperskill.org"))
                                  .value("size", compile("4x3"))
                          )
                      }
      
      
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest
          fun test7(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
      
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(
                              """
                          {
                              "player1": "mira@hyperskill.org",
                              "player2": "",
                              "size": "4x3"
                          }
                      """.trimIndent()
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(
                              """
                          {
                              "player1": "mira@hyperskill.org",
                              "player2": "",
                              "size": "1x10"
                          }
                      """.trimIndent()
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/1/join") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }
      
                      handleRequest(HttpMethod.Post, "/game/2/join") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }
      
                      handleRequest(HttpMethod.Post, "/game/1/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(""" { "move": "(2,3)" } """)
                      }.apply {
                          if (response.status() != HttpStatusCode.Forbidden) {
                              result =
                                  CheckResult.wrong("Expected status: 403 Forbidden\nFound:${response.status()}\nRoute: /game/1/move")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/move")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("You have no rights to make this move"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/1/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(""" { "move": "(2,3)" } """)
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game/1/move")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/move")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Move done"))
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/game/1/status") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game/1/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("game_id", isInteger(1))
                                  .value("game_status", compile("2nd player's move"))
                                  .value(
                                      "field",
                                      isArray(4)
                                          .item(0, isArray(" ", " ", " "))
                                          .item(1, isArray(" ", " ", "X"))
                                          .item(2, isArray(" ", " ", " "))
                                          .item(3, isArray(" ", " ", " "))
                                  )
                                  .value("player1", compile("mira@hyperskill.org"))
                                  .value("player2", compile("alex@hyperskill.org"))
                                  .value("size", compile("4x3"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/1/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(""" { "move": "(2,3)" } """)
                      }.apply {
                          if (response.status() != HttpStatusCode.BadRequest) {
                              result =
                                  CheckResult.wrong("Expected status: 400 Bad Request\nFound:${response.status()}\nRoute: /game/1/move")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/move")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Incorrect or impossible move"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/1/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(""" { "move": "(1,2)" } """)
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game/1/move")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/move")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Move done"))
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/game/1/status") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game/1/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("game_id", isInteger(1))
                                  .value("game_status", compile("1st player's move"))
                                  .value(
                                      "field",
                                      isArray(4)
                                          .item(0, isArray(" ", "O", " "))
                                          .item(1, isArray(" ", " ", "X"))
                                          .item(2, isArray(" ", " ", " "))
                                          .item(3, isArray(" ", " ", " "))
                                  )
                                  .value("player1", compile("mira@hyperskill.org"))
                                  .value("player2", compile("alex@hyperskill.org"))
                                  .value("size", compile("4x3"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/2/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(""" { "move": "(1,4)" } """)
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game/2/move")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/2/move")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("Move done"))
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/game/2/status") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game/2/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/2/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("game_id", isInteger(2))
                                  .value("game_status", compile("2nd player's move"))
                                  .value(
                                      "field",
                                      isArray(1)
                                          .item(0, isArray(" ", " ", " ", "X", " ", " ", " ", " ", " ", " "))
                                  )
                                  .value("player1", compile("mira@hyperskill.org"))
                                  .value("player2", compile("alex@hyperskill.org"))
                                  .value("size", compile("1x10"))
                          )
                      }
      
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
          @DynamicTest
          fun test8(): CheckResult {
              var result: CheckResult = CheckResult.correct();
              try {
                  withTestApplication(Application::module) {
      
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(
                              """
                          {
                              "player1": "mira@hyperskill.org",
                              "player2": "",
                              "size": "4x3"
                          }
                      """.trimIndent()
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(
                              """
                          {
                              "player1": "mira@hyperskill.org",
                              "player2": "",
                              "size": "1x10"
                          }
                      """.trimIndent()
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/1/join") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }
      
                      handleRequest(HttpMethod.Post, "/game/2/join") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }
      
      
                      handleRequest(HttpMethod.Post, "/game/1/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(""" { "move": "(1,1)" } """)
                      }
                      handleRequest(HttpMethod.Post, "/game/1/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(""" { "move": "(1,2)" } """)
                      }
                      handleRequest(HttpMethod.Post, "/game/1/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(""" { "move": "(2,1)" } """)
                      }
                      handleRequest(HttpMethod.Post, "/game/1/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(""" { "move": "(2,2)" } """)
                      }
                      handleRequest(HttpMethod.Post, "/game/1/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(""" { "move": "(3,1)" } """)
                      }
      
                      handleRequest(HttpMethod.Post, "/game/1/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(""" { "move": "(3,2)" } """)
                      }.apply {
                          if (response.status() != HttpStatusCode.Forbidden) {
                              result =
                                  CheckResult.wrong("Expected status: 403 Forbidden\nFound:${response.status()}\nRoute: /game/1/move")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/move")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("status", compile("You have no rights to make this move"))
                          )
                      }
      
                      handleRequest(HttpMethod.Get, "/game/1/status") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game/1/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/1/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("game_id", isInteger(1))
                                  .value("game_status", compile("1st player won"))
                                  .value(
                                      "field",
                                      isArray(4)
                                          .item(0, isArray("X", "O", " "))
                                          .item(1, isArray("X", "O", " "))
                                          .item(2, isArray("X", " ", " "))
                                          .item(3, isArray(" ", " ", " "))
                                  )
                                  .value("player1", compile("mira@hyperskill.org"))
                                  .value("player2", compile("alex@hyperskill.org"))
                                  .value("size", compile("4x3"))
                          )
                      }
      
                      handleRequest(HttpMethod.Post, "/game/2/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(""" { "move": "(1,1)" } """)
                      }
                      handleRequest(HttpMethod.Post, "/game/2/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(""" { "move": "(1,10)" } """)
                      }
                      handleRequest(HttpMethod.Post, "/game/2/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(""" { "move": "(1,2)" } """)
                      }
                      handleRequest(HttpMethod.Post, "/game/2/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(""" { "move": "(1,9)" } """)
                      }
                      handleRequest(HttpMethod.Post, "/game/2/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6Im1pcmFAaHlwZXJza2lsbC5vcmcifQ.5_G2rDHUYjJFzrqih0HXGuNTxxQMo6S5A0YFdFD9J8Q"
                          )
                          setBody(""" { "move": "(1,4)" } """)
                      }
                      handleRequest(HttpMethod.Post, "/game/2/move") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(""" { "move": "(1,8)" } """)
                      }
      
                      handleRequest(HttpMethod.Get, "/game/2/status") {
                          addHeader(HttpHeaders.ContentType, ContentType.Application.Json.toString())
                          addHeader(
                              HttpHeaders.Authorization,
                              "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImFsZXhAaHlwZXJza2lsbC5vcmcifQ.v1j3WkYqH1zb7vO6D7ylINhB47yp1HFrrmjYT8vwPO8"
                          )
                          setBody(" { } ")
                      }.apply {
                          if (response.status() != HttpStatusCode.OK) {
                              result =
                                  CheckResult.wrong("Expected status: 200 OK\nFound:${response.status()}\nRoute: /game/2/status")
                              return@apply
                          }
                          if (response.content.isNullOrBlank()) {
                              result = CheckResult.wrong("Empty response!\nRoute: /game/2/status")
                              return@apply
                          }
                          expect(response.content).asJson().check(
                              isObject()
                                  .value("game_id", isInteger(2))
                                  .value("game_status", compile("2nd player won"))
                                  .value(
                                      "field",
                                      isArray(1)
                                          .item(0, isArray("X", "X", " ", "X", " ", " ", " ", "O", "O", "O"))
                                  )
                                  .value("player1", compile("mira@hyperskill.org"))
                                  .value("player2", compile("alex@hyperskill.org"))
                                  .value("size", compile("1x10"))
                          )
                      }
      
                  }
              } catch (e: Exception) {
                  result = CheckResult.wrong(e.message)
              }
              return result
          }
      
      }
    learner_created: false
  - name: src/tictactoeonline/plugins/Routing.kt
    visible: true
    text: |-
      package tictactoeonline.plugins
      
      import io.ktor.application.*
      import io.ktor.http.*
      import io.ktor.request.*
      import io.ktor.routing.*
      import io.ktor.response.*
      import kotlinx.serialization.Serializable
      import kotlinx.serialization.json.*
      import kotlinx.serialization.*
      import tictactoeonline.*
      
      const val PLAYER1 = "Player1"
      const val PLAYER2 = "Player2"
      const val DEFAULT_GAME_SIZE = "3x3"
      
      @Serializable
      data class Game(
          var game_status: String,
          var field: MutableList<MutableList<String>>? = null,
          var player1: String? = null,
          var player2: String? = null,
          var size: String? = null
      )
      
      @Serializable
      enum class GameStatus(val status: String) {
          NOT_STARTED("game not started"),
          FIRST_PLAYER_MOVE("1st player's move"),
          SECOND_PLAYER_MOVE("2nd player's move"),
          FIRST_PLAYER_WON("1st player won"),
          SECOND_PLAYER_WON("2nd player won"),
          DRAW("draw");
      
          override fun toString(): String {
              return status
          }
      }
      
      @Serializable
      data class GameSetupInfo(val player1: String, val player2: String, val size: String)
      
      @Serializable
      data class RespondsForGameStep(
          var status: String,
          var player1: String? = null,
          var player2: String? = null,
          var size: String? = null
      )
      
      @Serializable
      enum class RespondsStatus(val status: String) {
          NEW_GAME_STARTER("New game started"),
          FIRST_PLAYER_MOVE("1st player's move"),
          SECOND_PLAYER_MOVE("2nd player's move"),
          FIRST_PLAYER_WON("1st player won"),
          SECOND_PLAYER_WON("2nd player won"),
          DRAW("draw");
      
          override fun toString(): String {
              return status
          }
      }
      
      @Serializable
      data class PlayerMove(val move: String)
      
      // An empty Game was created
      val currentGame = Game(game_status = GameStatus.NOT_STARTED.status)
      
      
      
      
      fun Application.configureRouting() {
      
          routing {
              post("/game") {
                  println()
                  println("post(\"/game\")")
                  try {
                      val receivedText = call.receiveText()
                      println("call.receiveText() = $receivedText, isBlank = ${receivedText.isBlank()}")
      
                      val gameSetupInfo = Json.decodeFromString<GameSetupInfo>(receivedText)
                      println("gameSetupInfo = $gameSetupInfo")
      
                      val respondForGameStep = initialSetupOfRespondAndGame(gameSetupInfo)
      
                      println("try => respondForGameStep = ${Json.encodeToString(respondForGameStep)}")
                      println("try => newGame = ${Json.encodeToString(currentGame)}")
      
                      call.respondText(
                          text = Json.encodeToString(respondForGameStep),
                          contentType = ContentType.Application.Json,
                          status = HttpStatusCode.OK
                      )
                  } catch (e: Exception) {
      
                      val gameSetupInfo = GameSetupInfo(
                          player1 = PLAYER1,
                          player2 = PLAYER2,
                          size = DEFAULT_GAME_SIZE
                      )
                      println("gameSetupInfo = $gameSetupInfo")
      
                      val respondForGameStep = initialSetupOfRespondAndGame(gameSetupInfo)
      
                      println("catch => respondForGameStep = ${Json.encodeToString(respondForGameStep)}")
                      println("catch => newGame = ${Json.encodeToString(currentGame)}")
      
                      call.respondText(
                          text = Json.encodeToString(respondForGameStep),
                          contentType = ContentType.Application.Json,
                          status = HttpStatusCode.OK
                      )
                  }
      
              }  // end of post("/game")
      
              post("/game/move") {
                  println()
                  println("post(\"/game/move\")")
      
                  try {
                      val receivedText = call.receiveText()
                      println("call.receiveText() = $receivedText, isBlank = ${receivedText.isBlank()}")
      
                      val playerMove = Json.decodeFromString<PlayerMove>(receivedText)
                      val moveCoords = playerMove.move
                      val moveCoordsPair = getMoveCoords(moveCoords)
                      println("try => playerMove = ${Json.encodeToString(playerMove)}")
      
                      val fieldCoordsPair = getGameFieldCoords(currentGame.size.toString())
                      val x = fieldCoordsPair.first
                      val y = fieldCoordsPair.second
                      val field = currentGame.field!!
      
                      if (!validateMoveCoords(moveCoords, x, y, field)) throw Exception("Incorrect or impossible move")
      
                      val symbol = getPlayerSymbol(currentGame.game_status)
                      val nextPlayerGameStatus = changePlayerTurn(currentGame.game_status)
      
                      insertMove(moveCoordsPair, field, symbol)
                      if (isWon(moveCoordsPair, field, symbol)) {
                          if (symbol == "X") currentGame.game_status = GameStatus.FIRST_PLAYER_WON.status
                          else currentGame.game_status = GameStatus.SECOND_PLAYER_WON.status
                      } else if (isDraw(field)) {
                          currentGame.game_status = GameStatus.DRAW.status
                      } else {
                          currentGame.game_status = nextPlayerGameStatus
                      }
                      call.respondText(
                          text = Json.encodeToString(mapOf("status" to "Move done")),
                          contentType = ContentType.Application.Json,
                          status = HttpStatusCode.OK
                      )
                  } catch (e: Exception) {
                      call.respondText(
                          text = Json.encodeToString(mapOf("status" to "Incorrect or impossible move")),
                          contentType = ContentType.Application.Json,
                          status = HttpStatusCode.BadRequest
                      )
                  }
              }  // end of post("/game/move")
      
              get("/game/status") {
                  println()
                  println("get(\"/game/status\")")
                  val receivedText = call.receiveText()
                  println("call.receiveText() = $receivedText, isBlank = ${receivedText.isBlank()}")
                  println("Json.encodeToString(newGame) = ${Json.encodeToString(currentGame)}")
      
                  call.respondText(
                      text = Json.encodeToString(currentGame),
                      contentType = ContentType.Application.Json,
                      status = HttpStatusCode.OK
                  )
              } // end of get("/game/status")
      
          }  // end_of_routing {}
      }  // end_Application.confugure()
      
      
      
      fun getPlayerSymbol(player: String): String {
          return if (player == GameStatus.FIRST_PLAYER_MOVE.status) "X" else "O"
      }
      
      fun changePlayerTurn(player: String): String {
          println("player = $player")
          return if (player == GameStatus.FIRST_PLAYER_MOVE.status) GameStatus.SECOND_PLAYER_MOVE.status else GameStatus.FIRST_PLAYER_MOVE.status
      }
      
      // ------Initial Setup Functions---mostly used in get("/post")--------//
      fun initialSetupOfRespondAndGame(gameSetupInfo: GameSetupInfo): RespondsForGameStep {
          val respondForGameStep = getRespondForGameStep(
              status = RespondsStatus.NEW_GAME_STARTER.status,
              player1 = gameSetupInfo.player1,
              player2 = gameSetupInfo.player2,
              size = gameSetupInfo.size
          )
      
          currentGameInitialSetup(
              GameStatus.FIRST_PLAYER_MOVE.status,
              respondForGameStep.player1.toString(),
              respondForGameStep.player2.toString(),
              respondForGameStep.size.toString()
          )
      
          return respondForGameStep
      }
      
      fun currentGameInitialSetup(gameStatus: String, player1: String, player2: String, size: String) {
          // generate the fieldListOfList
          val fieldCoordsPair = getGameFieldCoords(size)
          val x = fieldCoordsPair.first
          val y = fieldCoordsPair.second
          val fieldListOfList = createListOfListField(x, y)
      
          currentGame.game_status = gameStatus
          currentGame.field = fieldListOfList
          currentGame.player1 = player1
          currentGame.player2 = player2
          currentGame.size = size
      }
      
      fun getRespondForGameStep(status: String, player1: String?, player2: String?, size: String?): RespondsForGameStep {
          var validatedSize = size
          if (size != null) {
              val fieldCoordPair = getGameFieldCoords(size)
              validatedSize = "${fieldCoordPair.first}x${fieldCoordPair.second}"
          }
          return RespondsForGameStep(
              status = status,
              player1 = player1,
              player2 = player2,
              size = validatedSize
          )
      }
      
      // ------ END Of Initial Setup Functions---mostly used in get("/post")--------//
    learner_created: true
  - name: src/tictactoeonline/ConsoleGame.kt
    visible: true
    text: |-
      package tictactoeonline
      
      fun gameConsoleVersion() {
          val bothPlayers = getBothPlayerNames()
          val player1 = bothPlayers.first
          val player2 = bothPlayers.second
      
          println("Enter the field size (3x3 by default)")
          val inputSize = readln().trim()
          val fieldCoords = getGameFieldCoords(inputSize)
          val x = fieldCoords.first
          val y = fieldCoords.second
          println("Field size: ${x}x${y}")
          val listOfListField = createListOfListField(x, y)
      //    for (e in listOfListField) println(e)
          prettyPrintField(listOfListField)
      
          var player = player1
          while (true) {
              println("Enter $player's move as (x,y)")
              val symbol = if (player == player1) "X" else "O"
              val moveString = readln().trim()
              val isCorrectMove = validateMoveCoords(moveString, x, y, listOfListField)
              if (!isCorrectMove) {
                  println("Wrong move entered")
                  continue
              } else {
                  val moveCoordsPair = getMoveCoords(moveString)
                  insertMove(moveCoordsPair, listOfListField, symbol)
                  prettyPrintField(listOfListField, false)
                  if (isWon(moveCoordsPair, listOfListField, symbol)) {
                      println("$player wins!")
                      break
                  }
                  if (isDraw(listOfListField)) {
                      println("Draw!")
                      break
                  }
              }
              println()
              player = if (player == player1) player2 else player1
          }
      }
      
      fun isWon(moveCoords: Pair<Int, Int>, field: MutableList<MutableList<String>>, symbol: String): Boolean {
      
          val xIndex = moveCoords.first - 1
          val yIndex = moveCoords.second - 1
      
          // 12 checks in total
      
          // 1. Up two times
          if (xIndex - 2 >= 0) {
              val cellOneAbove = field[xIndex - 1][yIndex]
              val cellTwoAbove = field[xIndex - 2][yIndex]
              if (cellOneAbove == symbol && cellTwoAbove == symbol) return true
          }
      
          // 2. Up one time and Down one time
          if (xIndex - 1 >= 0 && xIndex + 1 < field.size) {
              val cellOneAbove = field[xIndex - 1][yIndex]
              val cellOneBelow = field[xIndex + 1][yIndex]
              if (cellOneAbove == symbol && cellOneBelow == symbol) return true
          }
      
          // 3. Down two times
          if (xIndex + 2 < field.size) {
              val cellOneBelow = field[xIndex + 1][yIndex]
              val cellTwoBelow = field[xIndex + 2][yIndex]
              if (cellOneBelow == symbol && cellTwoBelow == symbol) return true
          }
      
          // 4. Right two times
          if (yIndex + 2 < field[0].size) {
              val cellOneToRight = field[xIndex][yIndex + 1]
              val cellTwoToRight = field[xIndex][yIndex + 2]
              if (cellOneToRight == symbol && cellTwoToRight == symbol) return true
          }
      
          // 5. Right one time and Left one time
          if (yIndex - 1 >= 0 && yIndex + 1 < field[0].size) {
              val cellOneToRight = field[xIndex][yIndex + 1]
              val cellOneToLeft = field[xIndex][yIndex - 1]
              if (cellOneToRight == symbol && cellOneToLeft == symbol) return true
          }
      
          // 6. Left two times
          if (yIndex - 2 >= 0) {
              val cellOneToLeft = field[xIndex][yIndex - 1]
              val cellTwoToLeft = field[xIndex][yIndex - 2]
              if (cellOneToLeft == symbol && cellTwoToLeft == symbol) return true
          }
      
          // 7. Diagonal Up Right two times
          if (xIndex - 2 > 0 && yIndex + 2 < field[0].size) {
              val cellOneDiagUpRight = field[xIndex - 1][yIndex + 1]
              val cellTwoDiagUpRight = field[xIndex - 2][yIndex + 2]
              if (cellOneDiagUpRight == symbol && cellTwoDiagUpRight == symbol) return true
          }
      
          // 8. Diagonal Up Right one time and Diagonal Down Left one time
          if (xIndex - 1 > 0 && yIndex + 1 < field[0].size && xIndex + 1 > field.size && yIndex - 1 > 0) {
              val cellOneDiagUpRight = field[xIndex - 1][yIndex + 1]
              val cellOneDiagDownRight = field[xIndex + 1][yIndex - 1]
              if (cellOneDiagUpRight == symbol && cellOneDiagDownRight == symbol) return true
          }
      
          // 9. Diagonal Down Right two times
          if (xIndex + 2 < field.size && yIndex + 2 < field[0].size) {
              val cellOneDiagDownRight = field[xIndex + 1][yIndex + 1]
              val cellTwoDiagDownRight = field[xIndex + 2][yIndex + 2]
              if (cellOneDiagDownRight == symbol && cellTwoDiagDownRight == symbol) return true
          }
      
      
          // 10. Diagonal Up Left two times
          if (xIndex - 2 > 0 && yIndex - 2 > 0) {
              val cellOneDiagUpLeft = field[xIndex - 1][yIndex - 1]
              val cellTwoDiagUpLeft = field[xIndex - 2][yIndex - 2]
              if (cellOneDiagUpLeft == symbol && cellTwoDiagUpLeft == symbol) return true
          }
      
          // 11. Diagonal Up Left one time and Diagonal Down Right one time
          if (xIndex - 1 > 0 && yIndex - 1 > 0 && xIndex + 1 < field.size && yIndex + 1 < field[0].size) {
              val cellOneDiagUpLeft = field[xIndex - 1][yIndex - 1]
              val cellOneDiagDownLeft = field[xIndex + 1][yIndex + 1]
              if (cellOneDiagUpLeft == symbol && cellOneDiagDownLeft == symbol) return true
          }
      
          // 12. Diagonal Down Left two times
          if (xIndex + 2 < field.size && yIndex - 2 > 0) {
              val cellOneDiagDownLeft = field[xIndex + 1][yIndex - 1]
              val cellTwoDiagDownLeft = field[xIndex + 2][yIndex - 2]
              if (cellOneDiagDownLeft == symbol && cellTwoDiagDownLeft == symbol) return true
          }
      
          return false
      }
      
      
      fun isDraw(field: MutableList<MutableList<String>>): Boolean {
          for (row in field){
              for (cell in row) {
                  if (cell.isBlank()) return false
              }
          }
          return true
      }
      
      fun insertMove(moveCoords: Pair<Int, Int>, field: MutableList<MutableList<String>>, symbol: String) {
          val x = moveCoords.first
          val y = moveCoords.second
          field[x-1][y-1] = symbol
      }
      
      fun getMoveCoords(moveCoords: String): Pair<Int, Int> {
          val coords = moveCoords.trim().removeSurrounding("(", ")")
              .split(",")
              .map {it.trim().toInt()}
      
          return Pair(coords[0], coords[1])
      }
      
      fun validateMoveCoords(moveCoords: String, x: Int, y: Int, field: MutableList<MutableList<String>>): Boolean {
      
          if(!syntaxCheckForCoords(moveCoords)) return false
      
          val moveCoordsPair = getMoveCoords(moveCoords)
      
          val xCoord = moveCoordsPair.first
          val yCoord = moveCoordsPair.second
      
          if (!(xCoord in 1..x && yCoord in 1..y)) return false
      
          val cell = field[xCoord - 1][yCoord - 1]
          return cell.isBlank()
      }
      
      fun syntaxCheckForCoords(moveCoords: String): Boolean {
          try {
              val coords = moveCoords.trim().removeSurrounding("(", ")")
                  .split(",")
                  .map {it.trim().toInt()}
              if (coords.size != 2) {
                  return false
              }
              return true
          } catch (e: Exception) {
              return false
          }
      }
      
      
      fun prettyPrintField(field: MutableList<MutableList<String>>, isEmpty: Boolean = true) {
          val numOfRows = field.size
          val numOfCols = field[0].size
      
          for (i in 0..numOfRows) {
              if (i > 0) {
                  for (j in 1..numOfCols) {
                      val cell = field[i-1][j-1]
                      if (cell.isNotEmpty() || cell.isNotBlank()) print("| $cell ")
                      else print("|   ")
                  }
                  print("|")
                  println()
              }
              for (j in 1..numOfCols) {
                  print("|---")
              }
              if (i == 0 && isEmpty) print("|-y")
              else print("|")
              println()
          }
          if (isEmpty){
              println("|")
              println("x")
          }
      }
      
      fun createListOfListField(x: Int, y:Int): MutableList<MutableList<String>> {
          val outerList = mutableListOf<MutableList<String>>()
      
          for (i in 1..x) {
              val innerList = mutableListOf<String>()
              for (j in 1..y) {
                  innerList.add(" ")
              }
              outerList.add(innerList)
          }
          // println("outerList = $outerList")
          return outerList
      }
      
      fun getGameFieldCoords(inputSize: String): Pair<Int, Int> {
          val fieldCoordinates = validateFieldSize(inputSize)
          val x = fieldCoordinates.first
          val y = fieldCoordinates.second
          return Pair(x, y)
      }
      
      fun validateFieldSize(inputSize: String): Pair<Int, Int> {
          val pattern = Regex("\\d+x\\d+")
          val coordPair = if (pattern.matches(inputSize)) {
              val coordList = inputSize.split("x")
              val x = coordList[0].toInt()
              val y = coordList[1].toInt()
              if (x < 1 || y < 1) {
                  Pair(3, 3)
              } else if (x >= 3 || y >= 3) {
                  Pair(x, y)
              } else {
                  Pair(3, 3)
              }
          } else {
              Pair(3, 3)
          }
          return coordPair
      }
      
      fun getBothPlayerNames(): Pair<String, String> {
          println("Enter the first player's name (Player1 by default)")
          val player1 = readln().let { it.ifEmpty { "Player1" } }
          println("First player's name: $player1 ")
      
          println("Enter the second player's name (Player2 by default)")
          val player2 = readln().let { it.ifEmpty { "Player2" } }
          println("Second player's name: $player2 ")
      
          return Pair(player1, player2)
      }
      
      fun assignPlayerName(playerNum: Int, playerName: String): String {
          return playerName.ifEmpty { "Player${playerNum}" }
      }
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/30565#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Sun, 01 Oct 2023 17:16:34 UTC"
record: 3
